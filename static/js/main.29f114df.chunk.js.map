{"version":3,"sources":["listItems.js","App.js","serviceWorker.js","index.js"],"names":["listItems","props","items","map","item","className","key","onClick","deleteItem","width","height","viewBox","class","fill","xmlns","d","fill-rule","id","text","duration","easing","App","state","currentItem","handleInput","bind","addItem","e","this","setState","target","value","Date","now","preventDefault","newItem","console","log","newItems","filteredItems","filter","onSubmit","placeholder","type","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yTA6CeA,MAzCf,SAAmBC,GACjB,IAAMC,EAAQD,EAAMC,MACdF,EAAYE,EAAMC,KAAI,SAACC,GAC3B,OACE,4BACE,wBAAIC,UAAU,OAAOC,IAAKJ,EAAMI,KAC9B,yBACEC,QAAS,WACPN,EAAMO,WAAWJ,EAAKE,OAGxB,yBACEG,MAAM,QACNC,OAAO,QACPC,QAAQ,YACRC,MAAM,cACNC,KAAK,QACLC,MAAM,8BAEN,0BAAMC,EAAE,oKACR,0BACEC,YAAU,UACVD,EAAE,iPAIR,uBAAGE,GAAG,QACJ,uBAAGA,GAAG,iBAAN,KACCb,EAAKc,WAOhB,OACE,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,cAAcf,UAAU,SACrDL,IC4CQqB,E,kDA/Eb,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IACDqB,MAAQ,CACXpB,MAAO,GACPqB,YAAa,CACXL,KAAM,KACNZ,IAAK,OAGT,EAAKkB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKjB,WAAa,EAAKA,WAAWiB,KAAhB,gBAXD,E,wDAaPE,GACVC,KAAKC,SAAS,CACZN,YAAa,CACXL,KAAMS,EAAEG,OAAOC,MACfzB,IAAK0B,KAAKC,W,8BAIRN,GACNA,EAAEO,iBACF,IAAMC,EAAUP,KAAKN,MAAMC,YAE3B,GADAa,QAAQC,IAAIF,GACS,OAAjBA,EAAQjB,KAAe,CACzB,IAAMoB,EAAQ,sBAAOV,KAAKN,MAAMpB,OAAlB,CAAyBiC,IACvCP,KAAKC,SAAS,CACZ3B,MAAOoC,EACPf,YAAa,CACXL,KAAM,KACNZ,IAAK,W,iCAKFA,GACT,IAAMiC,EAAgBX,KAAKN,MAAMpB,MAAMsC,QAAO,SAACpC,GAAD,OAAUA,EAAKE,MAAQA,KACrEsB,KAAKC,SAAS,CACZ3B,MAAOqC,M,+BAIT,OACE,6BACE,4BAAQtB,GAAG,UACT,oDAEF,yBAAKZ,UAAU,QACb,yBAAKA,UAAU,OACb,gCACE,0BAAMY,GAAG,aAAawB,SAAUb,KAAKF,SACnC,8BACEgB,YAAY,aACZC,KAAK,OACLZ,MAAOH,KAAKN,MAAMC,YAAYL,KAC9B0B,SAAUhB,KAAKJ,cAEjB,yBAAKP,GAAG,WACN,4BAAQ0B,KAAK,UAAb,UAIN,kBAAC,EAAD,CACEzC,MAAO0B,KAAKN,MAAMpB,MAClBM,WAAYoB,KAAKpB,eAIvB,yBAAKH,UAAU,UACb,8DACkC,yD,GAxE1BwC,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.29f114df.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./listItems.css\";\r\nimport FlipMove from \"react-flip-move\";\r\n\r\nfunction listItems(props) {\r\n  const items = props.items;\r\n  const listItems = items.map((item) => {\r\n    return (\r\n      <ul>\r\n        <li className=\"list\" key={items.key}>\r\n          <div\r\n            onClick={() => {\r\n              props.deleteItem(item.key);\r\n            }}\r\n          >\r\n            <svg\r\n              width=\"1.5em\"\r\n              height=\"1.5em\"\r\n              viewBox=\"0 0 16 16\"\r\n              class=\"bi bi-trash\"\r\n              fill=\"white\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\r\n              <path\r\n                fill-rule=\"evenodd\"\r\n                d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"\r\n              />\r\n            </svg>\r\n          </div>\r\n          <p id=\"pTag\">\r\n            <p id=\"vertitalSlash\">|</p>\r\n            {item.text}\r\n          </p>\r\n        </li>\r\n      </ul>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <FlipMove duration={100} easing=\"ease-in-out\" className=\"items\">\r\n      {listItems}\r\n    </FlipMove>\r\n  );\r\n}\r\nexport default listItems;\r\n","import React from \"react\";\n\nimport \"./App.css\";\n\nimport ListItems from \"./listItems\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      currentItem: {\n        text: null,\n        key: null,\n      },\n    };\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n  }\n  handleInput(e) {\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        key: Date.now(),\n      },\n    });\n  }\n  addItem(e) {\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    console.log(newItem);\n    if (newItem.text !== null) {\n      const newItems = [...this.state.items, newItem];\n      this.setState({\n        items: newItems,\n        currentItem: {\n          text: null,\n          key: null,\n        },\n      });\n    }\n  }\n  deleteItem(key) {\n    const filteredItems = this.state.items.filter((item) => item.key !== key);\n    this.setState({\n      items: filteredItems,\n    });\n  }\n  render() {\n    return (\n      <div>\n        <header id=\"header\">\n          <h3>SHAHMEN IS WATCHIN!</h3>\n        </header>\n        <div className=\"main\">\n          <div className=\"App\">\n            <header>\n              <form id=\"to-do-list\" onSubmit={this.addItem}>\n                <textarea\n                  placeholder=\"Enter Here\"\n                  type=\"text\"\n                  value={this.state.currentItem.text}\n                  onChange={this.handleInput}\n                />\n                <div id=\"bMargin\">\n                  <button type=\"submit\">Add</button>\n                </div>\n              </form>\n            </header>\n            <ListItems\n              items={this.state.items}\n              deleteItem={this.deleteItem}\n            ></ListItems>\n          </div>\n        </div>\n        <div className=\"footer\">\n          <p>\n            All copy fucking rights goes to <i>HM Muneeb UR rehman</i>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}